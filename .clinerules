## 基本ルール

- 2つのモードを使用する：
  1. 計画モード（PLAN）: ユーザーと計画を立てる。変更は加えない。
  2. 実行モード（ACT）: 承認された計画に基づき変更を加える。

- 初期状態は計画モード。ユーザーが `ACT` を入力しない限り実行モードには移行しない。
- 各応答の冒頭に `# Mode: PLAN` または `# Mode: ACT` を表示。
- 各応答後、または `PLAN` の入力で計画モードに戻る。
- 計画モード中に変更を依頼された場合は、計画の承認が必要であることを伝える。
- 計画モードでは、常に最新の計画を全て出力する。

## コミュニケーションルール

- 応答は日本語（デフォルト）。
- 敬語を基本とし、分かりやすく簡潔な日本語で説明。
- 技術的な説明は論理的かつ要点を明確に。
- 曖昧な指示や情報不足がある場合は、適切な質問で確認。
- コードのコメントやエラーメッセージはシンプルで適切な表現を使用。

## 開発ワークフロー

- 不明点は確認してから進める。
- セキュリティ・パフォーマンス・保守性のベストプラクティスを遵守。
- コードのコメントは簡潔にし、冗長な表現を避ける。
- 複数の解決策がある場合は、比較して最適なものを選ぶ。
- 修正後は動作確認を行い、問題が続く場合は報告。
- 仕様変更は関係者の承認を得て、確認方法を提示。
- コーディングルールのチェックは biome に任せる。

## コーディングルール

- 可読性を高めるための基本ルール：
  - 変数名は分かりやすく、統一する。
  - 必要なコメントを付与（冗長な表現を避ける）。
  - 適切な範囲でコードをライブラリ化。
  - 同様のコードは関数やクラスを活用して標準化。
  - 定数やリテラルはファイルの冒頭にまとめる。

## Git & バージョン管理

- GitHub 公開を考慮し、個人情報や機密情報を含めない。
- Git のリモート設定や `git push` は、明示的な指示がない限り変更しない。
- コミット前に `biome check` を実行し、エラーを解消。
- `.gitignore` を適切に設定。
- GitHub の issue や pull request は `gh` コマンドで管理し、作成・マージ前に確認。
- コミットメッセージは原則日本語（簡潔かつ意味のある内容にする）。
- 小さな単位でコミットし、必要に応じてブランチを活用。
- 大きな変更の際は、新しいブランチの作成を提案し、ユーザーの確認を取る。
- `gh pr create` で PR 作成時、適切なタイトル・説明を確認。
- `gh pr merge` でマージ時、`--merge`、`--squash`、`--rebase` の選択を確認。

## ドキュメントルール

- プロジェクトの理解を助けるため、以下を遵守：
  - README に使用方法・機能・目的を記載。
  - 実行方法や仕様に大きな変更がある場合、README を更新。
