## 基本ルール

- 2つのモードを使用する：

  1. 計画モード（PLAN）: ユーザーと計画を立てる。変更は加えない。
  2. 実行モード（ACT）: 承認された計画に基づき変更を加える。

- 初期状態は計画モード。ユーザーが `ACT` を入力しない限り実行モードには移行しない。
- 各応答の冒頭に `# Mode: PLAN` または `# Mode: ACT` を表示。
- 各応答後、または `PLAN` の入力で計画モードに戻る。
- 計画モード中に変更を依頼された場合は、計画の承認が必要であることを伝える。
- 計画モードでは、常に最新の計画を全て出力する。

## プロジェクトの目標

- 友達との待ち合わせや、家族の送り迎えなどで、現在どの場所にいるかがわからず、不安になるという課題を解決する。
- 位置情報共有アプリを作成する。

## 主な要件

- webrtc の技術を使用して、リアルタイムで位置情報がマップ上に共有される。
- モバイルの Web ブラウザからの起動が前提となる。
- マップは mapbox サービスを使用する。
- Zoom などの通話アプリのように、最初にルームを作成しることで、URL が払い出せる。
- その URL を他の人に共有して、アクセスしてもらうことで、位置情報を共有するユーザーがルームにログインすることができる。
- ルームでは、リアルタイムで更新される位置情報で、視覚的に確認可能。

## プロジェクトの範囲

- モバイル Web ブラウザで動作する位置情報共有アプリ
- マップ表示
- リアルタイム位置情報共有
- ルーム作成と URL 共有機能

## プロジェクトが存在する理由

- 友達との待ち合わせや、家族の送り迎えなどで、現在どの場所にいるかがわからず、不安になるという課題を解決するため。
- リアルタイムで位置情報を共有できる Web アプリを提供することで、ユーザーの不安を解消し、よりスムーズなコミュニケーションを支援する。

## どのように動作するか

- ユーザーは Web ブラウザからアプリにアクセスし、ルームを作成または参加する。
- ルームに参加したユーザーは、リアルタイムで自身の位置情報をマップ上に共有する。
- 他のユーザーの位置情報もマップ上で確認できる。
- ルームの作成者は、URL を共有することで他のユーザーを招待できる。

## ユーザーエクスペリエンスの目標

- シンプルで直感的な操作性
- リアルタイムな位置情報共有による安心感
- スムーズなコミュニケーションを支援する快適な利用体験

## システムアーキテクチャ

- モバイル Web クライアント
- WebRTC シグナリングサーバー
- Mapbox 地図サービス

## 主要な技術的意思決定

- WebRTC によるリアルタイム位置情報共有
- Mapbox による地図表示
- Bun による高速な開発環境

## 使用中のデザインパターン

- シングルトンパターン (WebRTC シグナリングサーバー)
- オブザーバーパターン (位置情報更新)

## コンポーネント間の関係

- モバイル Web クライアントは、WebRTC シグナリングサーバーと通信して、位置情報を共有する。
- モバイル Web クライアントは、Mapbox 地図サービスを利用して、地図を表示する。

## 使用技術

- TypeScript
- React
- Vite
- Bun
- Biome
- WebRTC
- Mapbox GL JS

## 開発環境

- VSCode
- Node.js (バージョンは`.tool-versions`に指定)
- Bun (バージョンは`.tool-versions`に指定)

## 技術的な制約

- 特にありません。

## 依存関係

- React
- React DOM
- @types/mapbox-gl

## コミュニケーションルール

- 応答は日本語（デフォルト）。
- 敬語を基本とし、分かりやすく簡潔な日本語で説明。
- 技術的な説明は論理的かつ要点を明確に。
- 曖昧な指示や情報不足がある場合は、適切な質問で確認。
- コードのコメントやエラーメッセージはシンプルで適切な表現を使用。

## 開発ワークフロー

- 不明点は確認してから進める。
- セキュリティ・パフォーマンス・保守性のベストプラクティスを遵守。
- コードのコメントは簡潔にし、冗長な表現を避ける。
- 複数の解決策がある場合は、比較して最適なものを選ぶ。
- 修正後は動作確認を行い、問題が続く場合は報告。
- 仕様変更は関係者の承認を得て、確認方法を提示。
- コーディングルールのチェックは biome に任せる。

## コーディングルール

- 可読性を高めるための基本ルール：
  - 変数名は分かりやすく、統一する。
  - 必要なコメントを付与（冗長な表現を避ける）。
  - 適切な範囲でコードをライブラリ化。
  - 同様のコードは関数やクラスを活用して標準化。
  - 定数やリテラルはファイルの冒頭にまとめる。

## Git & バージョン管理

- GitHub 公開を考慮し、個人情報や機密情報を含めない。
- Git のリモート設定や `git push` は、明示的な指示がない限り変更しない。
- コミット前に `biome check` を実行し、エラーを解消。
- `.gitignore` を適切に設定。
- GitHub の issue や pull request は `gh` コマンドで管理し、作成・マージ前に確認。
- コミットメッセージは原則日本語（簡潔かつ意味のある内容にする）。
- 小さな単位でコミットし、必要に応じてブランチを活用。
- 大きな変更の際は、新しいブランチの作成を提案し、ユーザーの確認を取る。
- `gh pr create` で PR 作成時、適切なタイトル・説明を確認。
- `gh pr merge` でマージ時、`--merge`、`--squash`、`--rebase` の選択を確認。

## ドキュメントルール

- プロジェクトの理解を助けるため、以下を遵守：
  - README に使用方法・機能・目的を記載。
  - 実行方法や仕様に大きな変更がある場合、README を更新。
